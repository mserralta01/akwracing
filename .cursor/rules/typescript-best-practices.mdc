---
description: TypeScript coding standards and type safety guidelines
globs: **/*.{ts,tsx}
---
# TypeScript Best Practices

## Type Safety
- Enable strict mode in `tsconfig.json` for comprehensive type checking
- Avoid using `any` type unless absolutely necessary
- Use `unknown` instead of `any` when type is uncertain
- Implement proper null checking with optional chaining and nullish coalescing
- Use type guards for runtime type checking

## Type Definitions
- Use interfaces for object shapes and contract definitions
- Use types for unions, intersections, and utility types
- Create shared type definitions in the `types` directory
- Use generics for reusable components and functions
- Define proper return types for all functions

## API and Data Typing
- Create strong types for API responses
- Implement Zod for runtime validation of external data
- Define proper discriminated unions for state management
- Use enums for a set of named constants with specific values
- Create proper types for React component props

## Type Organization
- Organize types in dedicated files for complex domains
- Co-locate component-specific types with their components
- Use namespaces for grouping related types
- Keep type definitions DRY by leveraging inheritance and composition
- Use module augmentation for extending third-party types

## Error Handling
- Define proper error types with discriminated unions
- Use Result types for operations that might fail
- Implement proper type-safe error handling
- Create typed error boundaries in React components
- Use typed exceptions for internal errors

## TypeScript with React
- Use React.FC for function components with explicit prop types
- Implement proper generic types for custom hooks
- Type component state properly with useState generic parameter
- Use proper event types for event handlers (React.ChangeEvent, etc.)
- Implement proper typing for context providers and consumers
