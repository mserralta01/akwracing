---
description: 
globs: 
alwaysApply: false
---
# State Management Patterns

## Overview
This guide outlines comprehensive state management patterns for the project, covering React hooks, context, and server state management.

## Local State Management

### useState Patterns
```typescript
// Simple state
const [value, setValue] = useState<string>('');

// Complex state with type safety
interface FormState {
  email: string;
  password: string;
  isValid: boolean;
}

const [formState, setFormState] = useState<FormState>({
  email: '',
  password: '',
  isValid: false,
});

// State updates with previous state
const updateEmail = (email: string) => {
  setFormState(prev => ({
    ...prev,
    email,
    isValid: validateForm({ ...prev, email }),
  }));
};
```

### useReducer Patterns
```typescript
interface State {
  count: number;
  error: string | null;
  loading: boolean;
}

type Action =
  | { type: 'INCREMENT' }
  | { type: 'DECREMENT' }
  | { type: 'SET_ERROR'; payload: string }
  | { type: 'CLEAR_ERROR' }
  | { type: 'SET_LOADING'; payload: boolean };

const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    case 'DECREMENT':
      return { ...state, count: state.count - 1 };
    case 'SET_ERROR':
      return { ...state, error: action.payload };
    case 'CLEAR_ERROR':
      return { ...state, error: null };
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
    default:
      return state;
  }
};

// Usage
const [state, dispatch] = useReducer(reducer, {
  count: 0,
  error: null,
  loading: false,
});
```

## Context Management

### Context Creation
```typescript
interface AuthContext {
  user: User | null;
  login: (credentials: Credentials) => Promise<void>;
  logout: () => Promise<void>;
  loading: boolean;
  error: Error | null;
}

const AuthContext = createContext<AuthContext | null>(null);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  const login = async (credentials: Credentials) => {
    try {
      setLoading(true);
      const user = await loginUser(credentials);
      setUser(user);
    } catch (error) {
      setError(error);
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      await logoutUser();
      setUser(null);
    } catch (error) {
      setError(error);
    }
  };

  return (
    <AuthContext.Provider
      value={{ user, login, logout, loading, error }}
    >
      {children}
    </AuthContext.Provider>
  );
};
```

### Custom Hook Pattern
```typescript
const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// Usage
const MyComponent = () => {
  const { user, login, logout } = useAuth();
  // ...
};
```

## Server State Management

### React Query Patterns
```typescript
// Query definition
const useUsers = (params: UserQueryParams) => {
  return useQuery({
    queryKey: ['users', params],
    queryFn: () => fetchUsers(params),
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 30 * 60 * 1000, // 30 minutes
  });
};

// Mutation pattern
const useUpdateUser = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: updateUser,
    onSuccess: (data, variables) => {
      queryClient.setQueryData(
        ['user', variables.id],
        data
      );
      queryClient.invalidateQueries({
        queryKey: ['users'],
      });
    },
  });
};

// Optimistic updates
const useCreateTodo = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: createTodo,
    onMutate: async (newTodo) => {
      await queryClient.cancelQueries(['todos']);
      
      const previousTodos = queryClient.getQueryData(['todos']);
      
      queryClient.setQueryData(['todos'], (old: Todo[]) => [
        ...old,
        { ...newTodo, id: 'temp-id' },
      ]);
      
      return { previousTodos };
    },
    onError: (err, newTodo, context) => {
      queryClient.setQueryData(
        ['todos'],
        context.previousTodos
      );
    },
  });
};
```

## Form State Management

### React Hook Form Patterns
```typescript
interface FormInputs {
  email: string;
  password: string;
  confirmPassword: string;
}

const schema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
  confirmPassword: z.string(),
}).refine(
  (data) => data.password === data.confirmPassword,
  {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  }
);

const useSignUpForm = () => {
  const form = useForm<FormInputs>({
    resolver: zodResolver(schema),
    defaultValues: {
      email: '',
      password: '',
      confirmPassword: '',
    },
  });

  const onSubmit = async (data: FormInputs) => {
    try {
      await signUp(data);
    } catch (error) {
      form.setError('root', {
        type: 'submit',
        message: 'Sign up failed',
      });
    }
  };

  return { form, onSubmit };
};
```

## Performance Optimization

### Memoization Patterns
```typescript
// Memoize expensive calculations
const memoizedValue = useMemo(
  () => computeExpensiveValue(a, b),
  [a, b]
);

// Memoize callbacks
const memoizedCallback = useCallback(
  () => {
    doSomething(a, b);
  },
  [a, b]
);

// Memoize components
const MemoizedComponent = memo(
  ({ prop1, prop2 }) => {
    return <div>{prop1} {prop2}</div>;
  },
  (prevProps, nextProps) => {
    return (
      prevProps.prop1 === nextProps.prop1 &&
      prevProps.prop2 === nextProps.prop2
    );
  }
);
```

## State Persistence

### Local Storage Pattern
```typescript
const usePersistedState = <T>(
  key: string,
  initialValue: T
): [T, (value: T) => void] => {
  const [state, setState] = useState<T>(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      return initialValue;
    }
  });

  useEffect(() => {
    window.localStorage.setItem(key, JSON.stringify(state));
  }, [key, state]);

  return [state, setState];
};

// Usage
const [theme, setTheme] = usePersistedState('theme', 'light');
```

## State Synchronization

### WebSocket State
```typescript
const useWebSocketState = <T>(
  url: string,
  initialState: T
) => {
  const [state, setState] = useState<T>(initialState);
  const socket = useRef<WebSocket | null>(null);

  useEffect(() => {
    socket.current = new WebSocket(url);

    socket.current.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setState(data);
    };

    return () => {
      socket.current?.close();
    };
  }, [url]);

  const sendMessage = useCallback((message: unknown) => {
    if (socket.current?.readyState === WebSocket.OPEN) {
      socket.current.send(JSON.stringify(message));
    }
  }, []);

  return { state, sendMessage };
};
```

## Testing Patterns

### State Testing
```typescript
describe('State Management', () => {
  it('updates state correctly', () => {
    const { result } = renderHook(() => useState(0));
    
    act(() => {
      result.current[1](mdc:1);
    });
    
    expect(result.current[0]).toBe(1);
  });

  it('handles context updates', () => {
    const wrapper = ({ children }) => (
      <AuthProvider>{children}</AuthProvider>
    );
    
    const { result } = renderHook(() => useAuth(), {
      wrapper,
    });
    
    expect(result.current.user).toBeNull();
  });
});
```

## Best Practices

### State Organization
- Keep state as close as possible to where it's used
- Use context for truly global state
- Split complex state into smaller pieces
- Use appropriate state management tools
- Document state shape and updates

### Performance Considerations
- Minimize state updates
- Use appropriate memoization
- Split state logically
- Implement proper cleanup
- Monitor state changes

### Type Safety
- Define proper interfaces
- Use strict type checking
- Implement proper validation
- Handle edge cases
- Document type constraints 