---
description: UI Guidelines for AKW Racing Academy using Next.js 15, React 18, and Tailwind CSS
globs: **/*.{tsx,jsx,css,scss}
---
# UI Guidelines for AKW Racing Academy

## Brand Identity
- Use racing-inspired design elements that reflect professional motorsport aesthetics
- Maintain consistent color scheme across all pages (primary: blue, secondary: red, accent: gold)
- Implement branded typography with sans-serif fonts for readability
- Use dynamic motion effects that suggest speed and precision
- Apply consistent spacing and alignment for professional appearance

## Theme System
- Implement complete dark/light mode using next-themes
- Use CSS variables for theme tokens with semantic naming
- Support system preference detection with user override option
- Implement proper color contrast in both themes
- Use OKLCH color space for enhanced vibrancy where supported

## Component Architecture
### ShadCN UI Component Usage
- Use Dialog and Sheet for modal interfaces and side panels
- Implement Form, Input, and Select components for all data entry
- Use NavigationMenu and Tabs for primary navigation patterns
- Apply Button variants consistently based on action importance
- Implement proper loading states with Skeletons

### Custom Components
- Create racing-specific custom components when necessary
- Implement proper mobile responsiveness for all custom components
- Use TypeScript for strict type safety in component props
- Add comprehensive JSDoc comments for better development experience
- Structure components with clear separation of concerns

## Layout Patterns
- Use consistent page layouts with proper header and footer components
- Implement responsive designs that work on mobile, tablet, and desktop
- Create proper grid systems for course listings and racing statistics
- Use Card components for content organization with consistent spacing
- Implement proper navigation hierarchy with breadcrumbs

## Interactive Elements
- Create smooth animations for state transitions (300-500ms duration)
- Implement proper hover and focus states for all interactive elements
- Use consistent button styles based on action importance
- Implement proper loading indicators for asynchronous operations
- Create engaging microinteractions that enhance the racing theme

## Data Visualization
- Use Recharts for performance statistics and race data
- Implement consistent chart styling with brand colors
- Create proper loading and empty states for data displays
- Use appropriate chart types for different data (bar, line, radar)
- Implement responsive charts that work across device sizes

## Accessibility
- Ensure WCAG 2.1 AA compliance for all components
- Implement proper keyboard navigation for all interactive elements
- Use semantic HTML elements with appropriate ARIA attributes
- Maintain proper color contrast ratios (minimum 4.5:1 for normal text)
- Test with screen readers and keyboard-only navigation

## Motion and Animation
- Use Framer Motion for complex animations
- Implement reduced motion support for accessibility
- Create smooth page transitions with Next.js App Router
- Use consistent timing functions for animations (ease-in-out)
- Apply subtle racing-inspired animations where appropriate

## Responsive Design
- Design mobile-first layouts that scale up to larger screens
- Implement proper breakpoints for mobile, tablet, and desktop
- Use flexible grid systems with proper column layouts
- Create appropriate touch targets for mobile devices (minimum 44Ã—44px)
- Test thoroughly on various device sizes and orientations 